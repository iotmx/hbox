#!/usr/bin/env python3

#by Guillermo Ramirez-Prado

import schedule
import time
import datetime
import paho.mqtt.publish as publish
import json
import serial
import RPi.GPIO as GPIO
from hbox_settings import *
from uartport import *
import urllib.request
from busio import I2C
import adafruit_bme680

# Set serial port
ser = serial.Serial(
   port = ttyserialport,
   baudrate = 9600,
   parity = serial.PARITY_NONE,
   stopbits = serial.STOPBITS_ONE,
   bytesize = serial.EIGHTBITS,
   timeout=1.5
)

GPIO.setwarnings(False)

GPIO.setmode(GPIO.BCM)
GPIO.cleanup()
GPIO.setup(conPin, GPIO.OUT)
GPIO.setup(errPin, GPIO.OUT)
GPIO.setup(ackPin, GPIO.OUT)
GPIO.setup(mux_s0,   GPIO.OUT)
GPIO.setup(mux_s1,   GPIO.OUT)

GPIO.output(conPin, GPIO.LOW)
GPIO.output(errPin, GPIO.LOW)
GPIO.output(ackPin, GPIO.LOW)

GPIO.output(mux_s0,   1)
GPIO.output(mux_s1,   0)

# BME680
if using_bme680:
   i2c = I2C(board.SCL, board.SDA)
   bme680 = adafruit_bme680.Adafruit_BME680_I2C(i2c, debug=False)

   # change this to match the location's pressure (hPa) at sea level
   bme680.sea_level_pressure = 1024

   # You will usually have to add an offset to account for the temperature of
   # the sensor. This is usually around 5 degrees but varies by use. Use a
   # separate temperature sensor to calibrate this one.
   temperature_offset = -5

def err_blink():
    GPIO.output(errPin, GPIO.HIGH)
    time.sleep(0.1)
    GPIO.output(errPin, GPIO.LOW)
    time.sleep(0.1)
    GPIO.output(errPin, GPIO.HIGH)
    time.sleep(0.1)
    GPIO.output(errPin, GPIO.LOW)

def is_internet_on():
   try:
      urllib.request.urlopen('http://216.58.200.110', timeout = 2)
      GPIO.output(conPin, GPIO.HIGH)
   except:
      GPIO.output(conPin, GPIO.LOW)

def bme_():
   if using_bme680:
      try:
         ts = time.time()*1000
         currTemperature = bme680.temperature + temperature_offset
         currPressure = bme680.pressure
         currHumidity = bme680.humidity
         print("Temperature: {0:0.2f} deg C".format(currTemperature), "Pressure: {0:0.2f} hPa".format(currPressure), i2c = I2C(board.SCL, board.SDA)
bme680 = adafruit_bme680.Adafruit_BME680_I2C(i2c, debug=False)

# change this to match the location's pressure (hPa) at sea level
bme680.sea_level_pressure = 1013.25

# You will usually have to add an offset to account for the temperature of
# the sensor. This is usually around 5 degrees but varies by use. Use a
# separate temperature sensor to calibrate this one.
temperature_offset = -5"Humidity: {0:0.2f} %".format(currHumidity))

         payload = [("bme/temperature", json.dumps({"currName" : "temperature", "currBox" : currBox, "currValue" : currTemperature, "currTime" : ts}), 0, False),
                    (   "bme/pressure", json.dumps({"currName" :    "pressure", "currBox" : currBox, "currValue" :    currPressure, "currTime" : ts}), 0, False),
                    (   "bme/humidity", json.dumps({"currName" :    "humidity", "currBox" : currBox, 'currValue' :    currHumidity, 'currTime' : ts}), 0, False)]
         publish.multiple(payload, hostname="localhost")

      except IOError:
         err_blink()
         print("Error")

def ccs_():
   if using_ccs:
      try:
         if ccs.available():
            temp = ccs.calculateTemperature()
            if not ccs.readData():
               currCO2  = ccs.geteCO2()
               currTVOC = ccs.getTVOC()
               print("CO2: {} ppm".format(currCO2), "TVOC: {} ppm".format(currTVOC), "Calculated Temperature: {} deg C".format(temp))
               ts = time.time()*1000
               payload = [
#                          ("ccs/temperature", json.dumps({"currName" :   "temperature", "currBox" : currBox, "currValue" :     temp, "currTime" : ts}), 0, False),
                          ("ccs/eCO2"       , json.dumps({"currName" : "carbondioxide", "currBox" : currBox, "currValue" :  currCO2, "currTime" : ts}), 0, False),
                          ("ccs/tvoc"       , json.dumps({"currName" :          "tvoc", "currBox" : currBox, "currValue" : currTVOC, "currTime" : ts}), 0, False)]
               publish.multiple(payload, hostname="localhost")
            else:
               print("Error")
      except IOError:
         err_blink()
         print("Error")

def hpma_():
   if using_hpma:
      if ser.isOpen():
         ser.close()
      ser.open()
      time.sleep(0.1)
      ts = time.time()*1000
      data=ser.read(32)
      time.sleep(0.1)
      try:
         if ord(data[0]) == 66 and ord(data[1]) == 77:
            suma = 0
            for a in range(30):
               suma += ord(data[a])
            if suma == ord(data[30])*256+ord(data[31]):
               PM25 = int(ord(data[6])*256+ord(data[7]))
               PM10 = int((ord(data[8])*256+ord(data[9]))/0.75)
               PM25 = m25 * PM25 + b25
               PM10 = m10 * PM10 + b10
               print('PM2.5: {} ug/m3'.format(PM25))
               print('PM10 : {} ug/m3'.format(PM10))

               try:
                  payload = [("hpma/pm25", json.dumps({"currName" : "pm25", "currBox" : currBox, "currValue" : PM25, "currTime" : ts}), 0, False),
                             ("hpma/pm10", json.dumps({"currName" : "pm10", "currBox" : currBox, "currValue" : PM10, "currTime" : ts}), 0, False)]
                  publish.multiple(payload, hostname="localhost")
               except IOError:
                  err_blink()
                  print("Error")

            else:
               print("no data")
         else:
            print("no datax")
      except Exception as ex:
         err_blink()
         print(ex)
      finally:
         ser.close()

def hcho_():
   if using_hcho:
      try:
         ts = time.time()*1000
         x = ser.readline()
         print(x)
         # Is Gas name CH2O
         if x[1]=='\x17':
            ppb = float(ord(x[4])<<8 | ord(x[5]))
            ppm = float(ppb/1000)
            currHCHO = ppm
            try:
               payload = [("formaldehyde", json.dumps({"currName" : "formaldehyde", "currBox" : currBox, "currValue" : currHCHO, "currTime" : ts}), 0, False)]
               publish.multiple(payload, hostname="localhost")
            except IOError:
               err_blink()
               print("Error")

            print("HCHO: {0:0.2f} ppm".format(currHCHO)) #Sensor resolution 0.01

      except IOError:
         err_blink()
         print ("Error")
      except:
         err_blink()
         pass

schedule.every(30).seconds.do(is_internet_on)
schedule.every(st_bme).seconds.do(bme_)
schedule.every(st_ccs).seconds.do(ccs_)
schedule.every(st_hcho).seconds.do(hcho_)
schedule.every(st_hpma).seconds.do(hpma_)

while True:
   schedule.run_pending()
   time.sleep(0.3)
